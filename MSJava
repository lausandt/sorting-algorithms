/**
 * 
 */
package sorting;

import java.util.Arrays;
import java.util.Comparator;


/**
 * Implementation of merge sort for arrays
 * @author Lau Sandt
 *
 */
public class MergeSort {
	
	/**
	 * Keeps dividing the array until the contain one element
	 * then merges those elements (sorting happens in the merging step)
	 * @param <K> the type of the array to be sorted
	 * @param S the array 
	 * @param comp the comparator to be used usually the default comparator
	 */
	public static <K> void mergeSort(K[] S, Comparator<K> comp) {
		int n = S.length;	
		if (n < 2) return; 						// the list is sorted or empty
		int mid = n/2;
		K[] S1 = Arrays.copyOfRange(S,0, mid);  // copyOf includes te lower and not the higher bound			
		K[] S2 = Arrays.copyOfRange(S,mid, n);
		mergeSort(S1, comp);
		mergeSort(S2, comp);
		merge(S1,S2,S,comp);
	}
	
	@SuppressWarnings("unchecked")
	public static <K> void MergeSortBottumUp(K[] orig, Comparator<K> comp) {
		int n = orig.length;
		K[] src = orig;											// alias for the original
		K[] dst = (K[]) new Object[n];							// make a new temporary array 
		K[] temp;												// reference used only for swapping
		for (int i = 1; i < n; i *= 2) {						// each iteration sorts all runs of length i
			for (int j = 0; j < n; j += 2*i)					// each pass merges two runs of length i
				merge(src, dst,comp, j, i);						
			temp = src; src = dst; dst = temp;					// reverse the roles of the 
		}
		if (orig != src ) System.arraycopy(src, 0, orig, 0, n);
	}
	
	
    private static <K> void merge(K[] src, K[] dst, Comparator<K> comp, int start, int inc) {
		int end1 = Math.min(start+inc, src.length);
		int end2 = Math.min(start + 2*inc, src.length);
		int x = start;
		int y = start + inc;
		int z = start;
		while (x < end1 && y < end2)
			if (comp.compare(src[x], src[y]) < 0)
				dst[z++] = src[x++];
			else 
				dst[z++] = src[y++];
		if (x < end1) System.arraycopy(src, x, dst, z, end1-x);
		else if (y < end2) System.arraycopy(src, y, dst, z, end2-y);		
	}

	/**
     * in the while loop we have to cases
     * either we compare the values in the sub arrays and add the smallest to the final array
     * or one of the sub arrays is empty in which case we fill the final array with the rest
     */
	private static <K> void merge(K[] S1, K[] S2, K[] S, Comparator<K> comp) {
		int i = 0; int j = 0;
		while (i+j < S.length) {
			if ( j== S2.length || (i < S1.length && comp.compare(S1[i], S2[j]) < 0 )) 
				S[i+j]= S1[i++];
			else
				S[i+j] = S2[j++];
		}
	}
	


}
